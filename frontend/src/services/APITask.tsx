import { Task, TaskFormData } from '../types/TaskType';

// URL de base de l'API backend
const API_URL = 'http://localhost:5000/api/tasks';

/**
 * üì• R√©cup√®re toutes les t√¢ches depuis l'API
 */
export async function getTasks() :Promise<Task[]>{
  const response = await fetch(API_URL);
  if (!response.ok) {
    throw new Error('Erreur lors de la r√©cup√©ration des t√¢ches');
  }
  return response.json();
};

/**
 * Cr√©e une nouvelle t√¢che via l'API
 * @param task - les donn√©es du formulaire (title, description, status)
 */
export async function createTask(task: TaskFormData){
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(task),
  });
  
  if (!response.ok) {
    throw new Error('Erreur lors de la cr√©ation de la t√¢che');
  }
};

/**
 * Supprime une t√¢che avec son ID
 * @param id - identifiant de la t√¢che √† supprimer
 */
export async function deleteTask(id: number){
  const response = await fetch(`${API_URL}/${id}`, {
    method: 'DELETE',
  });
  
  if (!response.ok) {
    throw new Error('Erreur lors de la suppression de la t√¢che');
  }
};

/**
 * Change le statut d'une t√¢che (pending/done)
 * @param id - identifiant de la t√¢che √† mettre √† jour
 */
export async function updateTaskStatus(id: number){
  const response = await fetch(`${API_URL}/${id}`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
    },
  });
  
  if (!response.ok) {
    throw new Error('Erreur lors de la mise √† jour de la t√¢che');
  }
};

